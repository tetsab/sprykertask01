"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["main-popup"],{

/***/ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/components/molecules/main-popup/main-popup.ts":
/*!*****************************************************************************************************************************!*\
  !*** ./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/components/molecules/main-popup/main-popup.ts ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EVENT_CLOSE_POPUP: () => (/* binding */ EVENT_CLOSE_POPUP),
/* harmony export */   EVENT_OPEN_POPUP: () => (/* binding */ EVENT_OPEN_POPUP),
/* harmony export */   EVENT_POPUP_OPENED: () => (/* binding */ EVENT_POPUP_OPENED),
/* harmony export */   "default": () => (/* binding */ MainPopup)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _models_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");
/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../app */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/app/index.ts");
/* harmony import */ var _main_overlay_main_overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../main-overlay/main-overlay */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/components/molecules/main-overlay/main-overlay.ts");




var EVENT_OPEN_POPUP = 'openPopup';
var EVENT_CLOSE_POPUP = 'closePopup';
var EVENT_POPUP_OPENED = 'popupOpened';
class MainPopup extends _models_component__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    super(...arguments);
    this.triggers = void 0;
    this.closeButton = void 0;
    this.overlay = void 0;
    this.cloneTarget = document.body;
    this.clone = void 0;
    this.currentPopup = void 0;
    this.isRootPopup = void 0;
    this.isPopupOpened = false;
    this.showClassName = this.name + "--open";
    this.eventShowOverlay = void 0;
    this.eventHideOverlay = void 0;
  }
  readyCallback() {}
  init() {
    var _this = this;
    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.triggers = Array.from(document.getElementsByClassName(_this.triggerClassName));
      _this.overlay = document.getElementsByClassName(_this.overlayClassName)[0];
      _this.isRootPopup = _this.parentElement === _this.cloneTarget;
      yield _this.mapEvents();
      if (_this.isInitiallyOpen) {
        _this.togglePopup(true);
      }
    })();
  }
  mapEvents() {
    var _this2 = this;
    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2.mapOpenPopupEvent();
      _this2.mapClosePopupEvent();
      _this2.mapTriggersClickEvent();
      _this2.mapCloseButtonClickEvent();
      if (_this2.overlay) {
        yield (0,_app__WEBPACK_IMPORTED_MODULE_2__.mount)();
        _this2.mapOverlayEvents();
      }
    })();
  }
  mapOpenPopupEvent() {
    this.addEventListener(EVENT_OPEN_POPUP, () => this.onOpenPopup());
  }
  mapClosePopupEvent() {
    this.addEventListener(EVENT_CLOSE_POPUP, () => this.onClosePopup());
  }
  mapTriggersClickEvent() {
    this.triggers.forEach(trigger => {
      trigger.addEventListener('click', () => this.onTriggerClick());
    });
  }
  mapCloseButtonClickEvent(currentPopup) {
    if (currentPopup === void 0) {
      currentPopup = this;
    }
    this.closeButton = currentPopup.getElementsByClassName(this.jsName + "__close")[0];
    this.closeButton.addEventListener('click', () => this.onCloseButtonClick());
  }
  mapOverlayEvents() {
    var overlayConfig = {
      bubbles: true,
      detail: {
        id: this.popupId,
        zIndex: Number(getComputedStyle(this).zIndex) - 1
      }
    };
    this.eventShowOverlay = new CustomEvent(_main_overlay_main_overlay__WEBPACK_IMPORTED_MODULE_3__.EVENT_SHOW_OVERLAY, overlayConfig);
    this.eventHideOverlay = new CustomEvent(_main_overlay_main_overlay__WEBPACK_IMPORTED_MODULE_3__.EVENT_HIDE_OVERLAY, overlayConfig);
    if (this.shouldCloseByOverlayClick) {
      this.mapOverlayClickEvent();
    }
  }
  mapOverlayClickEvent() {
    this.overlay.addEventListener('click', () => this.onOverlayClick());
  }
  onOpenPopup() {
    this.togglePopup(true);
  }
  onClosePopup() {
    this.togglePopup(false);
  }
  onTriggerClick() {
    this.togglePopup();
  }
  onCloseButtonClick() {
    this.togglePopup(false);
  }
  onOverlayClick() {
    this.togglePopup(false);
  }
  togglePopup(forcePopup) {
    if (this.isPopupOpened === forcePopup) {
      return;
    }
    if (!this.currentPopup) {
      this.definePopup();
    }
    this.isPopupOpened = this.currentPopup.classList.toggle(this.showClassName, forcePopup);
    if (!this.isRootPopup && this.hasContentReload) {
      this.reloadContent();
    }
    if (this.overlay) {
      this.toggleOverlay();
    }
    if (this.isPopupOpened) {
      this.dispatchCustomEvent(EVENT_POPUP_OPENED);
    }
  }
  definePopup() {
    if (this.isRootPopup) {
      this.currentPopup = this;
      return;
    }
    this.createClone();
    this.currentPopup = this.clone;
  }
  createClone() {
    this.clone = document.createElement('div');
    this.clone.setAttribute('id', this.popupId);
    this.clone.setAttribute('class', this.getAttribute('class'));
    if (!this.hasContentReload) {
      this.clone.innerHTML = this.innerHTML;
      this.innerHTML = '';
    }
    this.cloneTarget.appendChild(this.clone);
    if (!this.hasContentReload) {
      this.mapCloseButtonClickEvent(this.clone);
    }
    if (this.hasContentMount) {
      (0,_app__WEBPACK_IMPORTED_MODULE_2__.mount)();
    }
  }
  reloadContent() {
    if (this.isPopupOpened) {
      this.clone.innerHTML = this.innerHTML;
      this.innerHTML = '';
      this.mapCloseButtonClickEvent(this.clone);
    }
    if (!this.isPopupOpened) {
      this.innerHTML = this.clone.innerHTML;
      this.clone.innerHTML = '';
    }
    if (this.hasContentMount) {
      (0,_app__WEBPACK_IMPORTED_MODULE_2__.mount)();
    }
  }
  toggleOverlay() {
    if (this.isPopupOpened) {
      this.dispatchEvent(this.eventShowOverlay);
      return;
    }
    this.dispatchEvent(this.eventHideOverlay);
  }
  get popupId() {
    return this.getAttribute('content-id');
  }
  get triggerClassName() {
    return this.getAttribute('trigger-class-name');
  }
  get isInitiallyOpen() {
    return this.hasAttribute('is-open');
  }
  get hasContentMount() {
    return this.hasAttribute('has-content-mount');
  }
  get hasContentReload() {
    return this.hasAttribute('has-content-reload');
  }
  get overlayClassName() {
    return this.getAttribute('overlay-class-name');
  }
  get shouldCloseByOverlayClick() {
    return this.hasAttribute('should-close-by-overlay-click');
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,