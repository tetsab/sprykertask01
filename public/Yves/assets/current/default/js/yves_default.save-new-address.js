"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["save-new-address"],{

/***/ "./vendor/spryker-shop/customer-page/src/SprykerShop/Yves/CustomerPage/Theme/default/components/molecules/save-new-address/save-new-address.ts":
/*!*****************************************************************************************************************************************************!*\
  !*** ./vendor/spryker-shop/customer-page/src/SprykerShop/Yves/CustomerPage/Theme/default/components/molecules/save-new-address/save-new-address.ts ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SaveNewAddress)
/* harmony export */ });
/* harmony import */ var ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ShopUi/models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");

var EVENT_ADD_NEW_ADDRESS = 'add-new-address';
class SaveNewAddress extends ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this.customerShippingAddresses = void 0;
    this.customerBillingAddresses = void 0;
    this.saveNewAddressToggler = void 0;
    this.sameAsShippingToggler = void 0;
    this.addNewShippingAddress = void 0;
    this.addNewBillingAddress = void 0;
    this.newShippingAddressChecked = false;
    this.newBillingAddressChecked = false;
    this.hideClass = 'is-hidden';
  }
  readyCallback() {
    if (this.shippingAddressTogglerSelector && this.billingAddressTogglerSelector) {
      this.customerShippingAddresses = document.querySelector(this.shippingAddressTogglerSelector);
      this.customerBillingAddresses = document.querySelector(this.billingAddressTogglerSelector);
    }
    if (this.addNewShippingAddressSelector && this.addNewBillingAddressSelector) {
      this.addNewShippingAddress = document.querySelector(this.addNewShippingAddressSelector);
      this.addNewBillingAddress = document.querySelector(this.addNewBillingAddressSelector);
    }
    this.saveNewAddressToggler = document.querySelector(this.saveAddressTogglerSelector);
    this.sameAsShippingToggler = document.querySelector(this.billingSameAsShippingAddressTogglerSelector);
    this.customerAddressesExists();
  }
  customerAddressesExists() {
    if (!this.customerShippingAddresses) {
      this.showSaveNewAddress();
      return;
    }
    this.mapEvents();
    this.initSaveNewAddressState();
  }
  mapEvents() {
    if (this.addNewShippingAddress && this.addNewBillingAddress) {
      this.addNewShippingAddress.addEventListener(EVENT_ADD_NEW_ADDRESS, () => this.shippingTogglerOnChange());
      this.addNewBillingAddress.addEventListener(EVENT_ADD_NEW_ADDRESS, () => this.billingTogglerOnChange());
    }
    this.customerShippingAddresses.addEventListener('change', () => this.shippingTogglerOnChange());
    this.customerBillingAddresses.addEventListener('change', () => this.billingTogglerOnChange());
    this.sameAsShippingToggler.addEventListener('change', () => this.toggleSaveNewAddress());
  }
  shippingTogglerOnChange() {
    this.newShippingAddressChecked = this.addressTogglerChange(this.customerShippingAddresses);
    this.toggleSaveNewAddress();
  }
  billingTogglerOnChange() {
    this.newBillingAddressChecked = this.addressTogglerChange(this.customerBillingAddresses);
    this.toggleSaveNewAddress();
  }
  initSaveNewAddressState() {
    this.newShippingAddressChecked = this.isSaveNewAddressOptionSelected(this.customerShippingAddresses);
    this.newBillingAddressChecked = this.isSaveNewAddressOptionSelected(this.customerBillingAddresses);
    this.toggleSaveNewAddress();
  }
  addressTogglerChange(toggler) {
    return this.isSaveNewAddressOptionSelected(toggler);
  }
  isSaveNewAddressOptionSelected(toggler) {
    return !toggler.value;
  }
  toggleSaveNewAddress() {
    if (this.newShippingAddressChecked || this.newBillingAddressChecked && !this.sameAsShippingChecked) {
      this.showSaveNewAddress();
      return;
    }
    this.hideSaveNewAddress();
  }
  hideSaveNewAddress() {
    this.classList.add(this.hideClass);
    this.saveNewAddressToggler.disabled = true;
  }
  showSaveNewAddress() {
    this.classList.remove(this.hideClass);
    this.saveNewAddressToggler.disabled = false;
  }
  get sameAsShippingChecked() {
    return this.sameAsShippingToggler.checked;
  }
  get shippingAddressTogglerSelector() {
    return this.getAttribute('shipping-address-toggler-selector');
  }
  get billingAddressTogglerSelector() {
    return this.getAttribute('billing-address-toggler-selector');
  }
  get addNewShippingAddressSelector() {
    return this.getAttribute('add-new-shipping-address-selector');
  }
  get addNewBillingAddressSelector() {
    return this.getAttribute('add-new-billing-address-selector');
  }
  get billingSameAsShippingAddressTogglerSelector() {
    return this.getAttribute('billing-same-as-shipping-toggler-selector');
  }
  get saveAddressTogglerSelector() {
    return this.getAttribute('save-address-toggler-selector');
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,