"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["node-animator"],{

/***/ "./src/Pyz/Yves/ShopUi/Theme/default/components/molecules/node-animator/node-animator.ts":
/*!***********************************************************************************************!*\
  !*** ./src/Pyz/Yves/ShopUi/Theme/default/components/molecules/node-animator/node-animator.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NodeAnimator)
/* harmony export */ });
/* harmony import */ var ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ShopUi/models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");

var DIRECTIONS = {
  TOP: 'top',
  RIGHT: 'right',
  BOTTOM: 'bottom',
  LEFT: 'left'
};
var DIMENSIONS = {
  WIDTH: 'width',
  HEIGHT: 'height'
};
var PERCENT = 100;
var EXPONENT = 2;
class NodeAnimator extends ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this.triggers = void 0;
    this.target = void 0;
    this.targetCoordinates = void 0;
    this.clonedElements = [];
    this.animationDuration = void 0;
    this.observer = void 0;
    this.viewportOptions = {
      rootMargin: '0px',
      threshold: 0
    };
    this.isTargetInViewport = true;
  }
  readyCallback() {}
  init() {
    this.triggers = Array.from(document.getElementsByClassName(this.triggerClassName));
    this.animationDuration = this.animationDurationValue;
    this.validateTarget();
    if (!this.triggers.length || !this.target) {
      return;
    }
    this.observer = this.initObserver();
    this.subscribeToObserver();
    this.mapEvents();
  }
  initObserver() {
    return new IntersectionObserver(this.observerCallback(), this.viewportOptions);
  }
  observerCallback() {
    return entries => {
      entries.forEach(entry => {
        this.targetState = Boolean(entry.intersectionRatio) || entry.isIntersecting;
      });
    };
  }
  subscribeToObserver() {
    this.observer.observe(this.target);
  }
  validateTarget() {
    if (!this.target || this.target.offsetParent === null) {
      this.target = Array.from(document.getElementsByClassName(this.targetClassName)).filter(target => target.offsetParent !== null)[0];
    }
    if (!this.target) {
      return;
    }
    this.updateTargetCoordinates();
  }
  updateTargetCoordinates() {
    this.targetCoordinates = this.target.getBoundingClientRect();
  }
  set targetState(isInViewport) {
    if (this.isTargetInViewport !== isInViewport) {
      this.validateTarget();
    }
    this.isTargetInViewport = isInViewport;
  }
  mapEvents() {
    this.mapTriggerClickEvent();
  }
  mapTriggerClickEvent() {
    this.triggers.forEach(trigger => {
      trigger.addEventListener('click', () => this.onClick(trigger));
    });
  }
  onClick(trigger) {
    this.cloneElement(trigger);
    this.startAnimation();
  }
  cloneElement(trigger) {
    var _trigger$dataset$node, _trigger$dataset$node2, _trigger$dataset$clon;
    var wrapperSelector = (_trigger$dataset$node = trigger.dataset.nodeAnimatorWrapperClassName) != null ? _trigger$dataset$node : this.wrapperClassName;
    var wrapper = trigger.closest("." + wrapperSelector);
    var elementSelector = (_trigger$dataset$node2 = trigger.dataset.nodeAnimatorNodeClassName) != null ? _trigger$dataset$node2 : this.elementClassName;
    var element = wrapper.getElementsByClassName(elementSelector)[0];
    var elementCoordinates = element.getBoundingClientRect();
    var clonedNode = element.cloneNode(true);
    clonedNode.className = this.name + "__image " + this.cloneNodeClassNames + " " + ((_trigger$dataset$clon = trigger.dataset.cloneNodeClassNames) != null ? _trigger$dataset$clon : '');
    clonedNode.style.cssText = "\n            top: " + (elementCoordinates.top + scrollY) + "px;\n            left: " + (elementCoordinates.left + scrollX) + "px;\n            width: " + elementCoordinates.width + "px;\n            height: " + elementCoordinates.height + "px;\n        ";
    this.clonedElements.push({
      element: clonedNode,
      coordinates: elementCoordinates,
      pageXScroll: scrollX,
      pageYScroll: scrollY,
      animationStartTime: performance.now()
    });
    document.body.appendChild(clonedNode);
  }
  startAnimation() {
    requestAnimationFrame(time => this.animateElement(time));
  }
  animateElement(time) {
    if (!this.clonedElements.length) {
      return;
    }
    this.moveElements(time);
    this.startAnimation();
  }
  moveElements(time) {
    this.clonedElements.forEach(item => {
      var timeFraction = (time - item.animationStartTime) / this.animationDuration;
      var progress = Math.pow(timeFraction, EXPONENT);
      var percentageProgress = progress * PERCENT;
      if (this.isTargetInViewport) {
        this.validateTarget();
      }
      var sides = [DIRECTIONS.TOP, DIRECTIONS.LEFT, DIMENSIONS.WIDTH, DIMENSIONS.HEIGHT];
      this.setAnimationDistance(sides, item, percentageProgress);
      if (percentageProgress <= PERCENT) {
        return;
      }
      this.clonedElements.shift();
      document.body.removeChild(item.element);
    });
  }
  setAnimationDistance(sides, element, percentageProgress) {
    sides.forEach(side => {
      var pageOffset = 0;
      var initialPageOffset = 0;
      if (side === DIRECTIONS.LEFT || side === DIRECTIONS.RIGHT) {
        initialPageOffset = element.pageXScroll;
        pageOffset = scrollX;
      }
      if (side === DIRECTIONS.TOP || side === DIRECTIONS.BOTTOM) {
        initialPageOffset = element.pageYScroll;
        pageOffset = scrollY;
      }
      var elementCoordinates = Number(element.coordinates[side]) + initialPageOffset;
      var distance = elementCoordinates - (Number(this.targetCoordinates[side]) + pageOffset);
      var progressDistance = distance * percentageProgress / PERCENT;
      var newDistance = elementCoordinates - progressDistance;
      element.element.style[side] = newDistance + "px";
    });
  }
  get triggerClassName() {
    return this.getAttribute('trigger-class-name');
  }
  get targetClassName() {
    return this.getAttribute('target-class-name');
  }
  get elementClassName() {
    return this.getAttribute('node-class-name');
  }
  get wrapperClassName() {
    return this.getAttribute('wrapper-class-name');
  }
  get cloneNodeClassNames() {
    return this.getAttribute('clone-node-class-names');
  }
  get animationDurationValue() {
    return Number(this.getAttribute('animation-duration'));
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,