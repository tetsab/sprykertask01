"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["validate-next-checkout-step"],{

/***/ "./vendor/spryker-shop/checkout-page/src/SprykerShop/Yves/CheckoutPage/Theme/default/components/molecules/validate-next-checkout-step/validate-next-checkout-step.ts":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./vendor/spryker-shop/checkout-page/src/SprykerShop/Yves/CheckoutPage/Theme/default/components/molecules/validate-next-checkout-step/validate-next-checkout-step.ts ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EVENT_INIT: () => (/* binding */ EVENT_INIT),
/* harmony export */   "default": () => (/* binding */ ValidateNextCheckoutStep)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var ShopUi_models_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ShopUi/models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");



/**
 * @event afterInit An event emitted when the component has been initialized.
 */
var EVENT_INIT = 'afterInit';
class ValidateNextCheckoutStep extends ShopUi_models_component__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor() {
    super(...arguments);
    this.containers = void 0;
    this.triggers = void 0;
    this.extraTriggers = void 0;
    this.target = void 0;
    this.dropdownTriggers = void 0;
    this.parentTarget = void 0;
    this.requiredFormFieldSelectors = 'select[required], input[required]';
    this.dropdownTriggersChangeHandler = void 0;
    this.parentTargetToggleFormHandler = void 0;
    this.extraTriggerChangeHandler = void 0;
    this.triggerInputHandler = void 0;
  }
  readyCallback() {}
  init() {
    this.target = document.querySelector(this.targetSelector);
    if (this.parentTargetClassName) {
      this.parentTarget = document.getElementsByClassName(this.parentTargetClassName)[0];
    }
    if (this.isTriggerEnabled) {
      this.initTriggerState();
    }
    this.dispatchCustomEvent(EVENT_INIT);
  }
  mapEvents() {
    this.mapTriggerEvents();
    this.dropdownTriggersChangeHandler = () => this.onDropdownTriggerChange();
    this.dropdownTriggers.forEach(element => {
      element.addEventListener('change', this.dropdownTriggersChangeHandler);
    });
    if (this.parentTarget) {
      this.parentTargetToggleFormHandler = () => this.onDropdownTriggerChange();
      this.parentTarget.addEventListener('toggleForm', this.parentTargetToggleFormHandler);
    }
    if (this.extraTriggers) {
      this.extraTriggerChangeHandler = () => this.onExtraTriggerChange();
      this.extraTriggers.forEach(extraTrigger => {
        extraTrigger.addEventListener('change', this.extraTriggerChangeHandler);
      });
    }
  }

  /**
   * Resets events that were subscribed in the `mapEvents` method.
   */
  resetEvents() {
    if (this.triggers) {
      this.triggers.forEach(element => {
        element.removeEventListener('input', this.triggerInputHandler);
      });
    }
    if (this.dropdownTriggers) {
      this.dropdownTriggers.forEach(element => {
        element.removeEventListener('change', this.dropdownTriggersChangeHandler);
      });
    }
    if (this.parentTarget) {
      this.parentTarget.removeEventListener('toggleForm', this.parentTargetToggleFormHandler);
    }
    if (this.extraTriggers) {
      this.extraTriggers.forEach(extraTrigger => {
        extraTrigger.removeEventListener('change', this.extraTriggerChangeHandler);
      });
    }
  }
  mapTriggerEvents() {
    if (this.triggers) {
      this.triggerInputHandler = () => this.onTriggerInput();
      this.triggers.forEach(element => {
        element.addEventListener('input', this.triggerInputHandler);
      });
    }
  }

  /**
   * Init the methods, which fill the collection of form fields and toggle disabling of button.
   */
  initTriggerState() {
    var _this = this;
    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield _this.fillExtraTriggersCollection();
      _this.containers = Array.from(document.querySelectorAll(_this.containerSelector));
      _this.fillDropdownTriggersCollection();
      _this.fillFormFieldsCollection();
      _this.toggleDisablingNextStepButton();
      _this.resetEvents();
      _this.mapEvents();
    })();
  }
  fillDropdownTriggersCollection() {
    this.dropdownTriggers = Array.from(document.querySelectorAll(this.dropdownTriggerSelector));
  }
  fillFormFieldsCollection() {
    var _this2 = this;
    return (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2.triggers = [];
      if (!_this2.containers) {
        return;
      }
      _this2.triggers = _this2.containers.reduce((collection, element) => {
        var extraContainer = _this2.extraContainerSelector ? element.closest(_this2.extraContainerSelector) : null;
        if (!element.classList.contains(_this2.classToToggle) && !(extraContainer != null && extraContainer.classList.contains(_this2.classToToggle))) {
          collection.push(...Array.from(element.querySelectorAll(_this2.requiredFormFieldSelectors)));
        }
        return collection;
      }, []);
    })();
  }
  fillExtraTriggersCollection() {
    if (!this.extraTriggersClassName) {
      return;
    }
    this.extraTriggers = Array.from(document.getElementsByClassName(this.extraTriggersClassName));
  }
  onTriggerInput() {
    this.fillFormFieldsCollection();
    this.toggleDisablingNextStepButton();
  }
  onDropdownTriggerChange() {
    this.onTriggerInput();
    this.mapTriggerEvents();
  }
  onExtraTriggerChange() {
    this.initTriggerState();
  }
  toggleDisablingNextStepButton() {
    if (!this.target) {
      return;
    }
    var isFormInvalid = this.isFormFieldsEmpty || this.isDropdownTriggerPreSelected || this.isExtraTriggersUnchecked;
    this.disableNextStepButton(isFormInvalid);
  }

  /**
   * Removes/Sets the disabled attribute for target element.
   */
  disableNextStepButton(isDisabled) {
    if (this.target) {
      this.target.disabled = isDisabled;
    }
  }
  get isDropdownTriggerPreSelected() {
    if (!this.dropdownTriggers) {
      return false;
    }
    return this.dropdownTriggers.some(element => !element.value);
  }
  get isExtraTriggersUnchecked() {
    if (!this.extraTriggers) {
      return false;
    }
    var groupExtraTriggers = {};
    var checkedGroup = [];
    this.extraTriggers.forEach(extraTrigger => {
      var triggerName = extraTrigger.name;
      if (groupExtraTriggers[triggerName] !== extraTrigger.checked) {
        groupExtraTriggers[triggerName] = extraTrigger.checked;
      }
      if (groupExtraTriggers[triggerName]) {
        checkedGroup.push(triggerName);
        groupExtraTriggers[triggerName] = false;
      }
    });
    return Object.keys(groupExtraTriggers).length !== checkedGroup.length;
  }

  /**
   * Checks if the form fields are empty.
   */
  get isFormFieldsEmpty() {
    return this.triggers.some(element => !element.value);
  }

  /**
   * Gets a querySelector name of the target element.
   */
  get targetSelector() {
    return this.getAttribute('target-selector');
  }

  /**
   * Gets a querySelector name of the form element.
   */
  get containerSelector() {
    return this.getAttribute('container-selector');
  }
  get extraContainerSelector() {
    return this.getAttribute('extra-container-selector');
  }

  /**
   * Gets a querySelector name of the dropdown trigger element.
   */
  get dropdownTriggerSelector() {
    return this.getAttribute('dropdown-trigger-selector');
  }

  /**
   * Checks if the trigger element is enabled.
   */
  get isTriggerEnabled() {
    return this.hasAttribute('is-enable');
  }

  /**
   * Gets a class name for the toggle action.
   */
  get classToToggle() {
    return this.getAttribute('class-to-toggle');
  }
  get parentTargetClassName() {
    return this.getAttribute('parent-target-class-name');
  }
  get extraTriggersClassName() {
    return this.getAttribute('extra-triggers-class-name');
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,