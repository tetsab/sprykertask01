"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["quantity-counter"],{

/***/ "./src/Pyz/Yves/ShopUi/Theme/default/components/molecules/quantity-counter/quantity-counter.ts":
/*!*****************************************************************************************************!*\
  !*** ./src/Pyz/Yves/ShopUi/Theme/default/components/molecules/quantity-counter/quantity-counter.ts ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ QuantityCounter)
/* harmony export */ });
/* harmony import */ var ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ShopUi/models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");

class QuantityCounter extends ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this.quantityInput = void 0;
    this.decrButton = void 0;
    this.incrButton = void 0;
    this.value = void 0;
    this.duration = 1000;
    this.timeout = 0;
    this.formattedNumberInput = void 0;
  }
  readyCallback() {}
  init() {
    this.quantityInput = this.getElementsByClassName(this.jsName + "__input")[0];
    this.decrButton = this.getElementsByClassName(this.jsName + "__decr")[0];
    this.incrButton = this.getElementsByClassName(this.jsName + "__incr")[0];
    this.formattedNumberInput = this.getElementsByClassName(this.jsName + "__formatted-input")[0];
    this.value = this.getValue;
    this.mapEvents();
    this.setMaxQuantityToInfinity();
  }
  mapEvents() {
    var _this$quantityInput;
    this.decrButton.addEventListener('click', event => this.onChangeQuantity(event, 'decrease'));
    this.incrButton.addEventListener('click', event => this.onChangeQuantity(event, 'increase'));
    (_this$quantityInput = this.quantityInput) == null ? void 0 : _this$quantityInput.addEventListener('keydown', event => this.onKeyDown(event));
    if (this.autoUpdate) {
      this.quantityInput.addEventListener('change', () => this.delayToSubmit());
    }
  }
  onChangeQuantity(event, type) {
    event.preventDefault();
    if (this.isDisabled) {
      return;
    }
    var value = this.formattedNumberInput.unformattedValue;
    var isDecrease = value > this.minQuantity && type === 'decrease';
    var isIncrease = value < this.maxQuantity && type === 'increase';
    var shouldUpdate = isDecrease || isIncrease;
    if (!shouldUpdate) {
      return;
    }
    this.quantityInput.value = (isDecrease ? value - 1 : isIncrease ? value + 1 : value).toString();
    if (this.isAjaxMode) {
      this.delayToSubmit(true);
      return;
    }
    this.quantityInput.dispatchEvent(new Event('change'));
    this.quantityInput.dispatchEvent(new Event('input'));
  }
  delayToSubmit(triggerInput) {
    if (triggerInput === void 0) {
      triggerInput = false;
    }
    clearTimeout(this.timeout);
    this.timeout = window.setTimeout(() => {
      if (this.value === this.getValue) {
        return;
      }
      if (this.isAjaxMode && triggerInput) {
        this.quantityInput.dispatchEvent(new Event('input', {
          bubbles: true
        }));
        this.quantityInput.dispatchEvent(new Event('change', {
          bubbles: true
        }));
        return;
      }
      if (!this.isAjaxMode) {
        this.quantityInput.form.submit();
      }
    }, this.duration);
  }
  onKeyDown(event) {
    if (event.key === 'Enter') {
      event.preventDefault();
    }
  }
  setMaxQuantityToInfinity() {
    if (!this.maxQuantity) {
      this.quantityInput.setAttribute('data-max-quantity', 'Infinity');
    }
  }
  get maxQuantity() {
    return +this.quantityInput.getAttribute('data-max-quantity');
  }
  get minQuantity() {
    return +this.quantityInput.getAttribute('data-min-quantity');
  }
  get autoUpdate() {
    return this.quantityInput.hasAttribute('data-auto-update');
  }
  get isDisabled() {
    return this.quantityInput.hasAttribute('disabled');
  }
  get getValue() {
    return this.formattedNumberInput.unformattedValue;
  }
  get isAjaxMode() {
    return !!this.quantityInput.getAttribute('data-ajax-mode');
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,