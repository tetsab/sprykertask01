"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["multiple-shipment-toggler"],{

/***/ "./vendor/spryker-shop/checkout-page/src/SprykerShop/Yves/CheckoutPage/Theme/default/components/molecules/multiple-shipment-toggler/multiple-shipment-toggler.ts":
/*!***********************************************************************************************************************************************************************!*\
  !*** ./vendor/spryker-shop/checkout-page/src/SprykerShop/Yves/CheckoutPage/Theme/default/components/molecules/multiple-shipment-toggler/multiple-shipment-toggler.ts ***!
  \***********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MultipleShipmentToggler)
/* harmony export */ });
/* harmony import */ var ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ShopUi/models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");

class MultipleShipmentToggler extends ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this.singleShipmentTrigger = void 0;
    this.multipleShipmentTrigger = void 0;
    this.shipmentTypeSelect = void 0;
    this.targets = void 0;
    this.prevShipmentValue = void 0;
  }
  readyCallback() {}
  init() {
    this.singleShipmentTrigger = this.getElementsByClassName(this.jsName + "__single-shipment-trigger")[0];
    this.multipleShipmentTrigger = this.getElementsByClassName(this.jsName + "__multiple-shipment-trigger")[0];
    this.shipmentTypeSelect = document.getElementsByClassName(this.selectClassName)[0];
    this.targets = Array.from(document.getElementsByClassName(this.targetsClassName));
    if (!this.shipmentTypeSelect) {
      return;
    }
    this.updateShipmentTypeSelect();
    this.mapEvents();
  }
  updateShipmentTypeSelect() {
    var multipleShipmentTypeOption = Array.from(this.shipmentTypeSelect.options).find(item => item.value === this.multipleShipmentValue);
    multipleShipmentTypeOption.classList.add(this.toggleClassName);
  }
  mapEvents() {
    this.mapSingleShipmentTriggerClickEvent();
    this.mapMultipleShipmentTriggerClickEvent();
    this.mapShipmentTypeSelectСhangeEvent();
  }
  mapSingleShipmentTriggerClickEvent() {
    this.singleShipmentTrigger.addEventListener('click', () => this.onSingleShipmentTriggerClick());
  }
  mapMultipleShipmentTriggerClickEvent() {
    this.multipleShipmentTrigger.addEventListener('click', () => this.onMultipleShipmentTriggerClick());
  }
  mapShipmentTypeSelectСhangeEvent() {
    this.shipmentTypeSelect.addEventListener('change', () => this.onShipmentTypeSelectChange());
  }
  onSingleShipmentTriggerClick() {
    this.shipmentTypeSelect.value = this.prevShipmentValue ? this.prevShipmentValue : this.singleShipmentValue;
    this.dispatchChangeEvent();
  }
  onMultipleShipmentTriggerClick() {
    this.prevShipmentValue = this.shipmentTypeSelect.value;
    this.shipmentTypeSelect.value = this.multipleShipmentValue;
    this.dispatchChangeEvent();
  }
  onShipmentTypeSelectChange() {
    var isMultipleShipmentActive = this.shipmentTypeSelect.value === this.multipleShipmentValue;
    this.updateButtonsState(isMultipleShipmentActive);
    this.toggleTarget(isMultipleShipmentActive);
  }
  dispatchChangeEvent() {
    this.shipmentTypeSelect.dispatchEvent(new Event('change'));
  }
  toggleTarget(force) {
    if (!this.targets.length) {
      return;
    }
    this.targets.forEach(target => target.classList.toggle(this.toggleClassName, force));
  }
  updateButtonsState(isMultipleShipmentActive) {
    this.singleShipmentTrigger.classList.toggle(this.toggleButtonClassName, isMultipleShipmentActive);
    this.multipleShipmentTrigger.classList.toggle(this.toggleButtonClassName, !isMultipleShipmentActive);
  }
  get selectClassName() {
    return this.getAttribute('select-class-name');
  }
  get targetsClassName() {
    return this.getAttribute('toggle-targets-class-name');
  }
  get toggleClassName() {
    return this.getAttribute('toggle-class-name');
  }
  get toggleButtonClassName() {
    return this.getAttribute('toggle-button-class-name');
  }
  get singleShipmentValue() {
    return this.getAttribute('single-shipment-value');
  }
  get multipleShipmentValue() {
    return this.getAttribute('multiple-shipment-value');
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,