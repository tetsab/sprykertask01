"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["payone-klarna"],{

/***/ "./vendor/spryker-eco/payone/src/SprykerEco/Yves/Payone/Theme/default/components/molecules/payone-klarna/payone-klarna.ts":
/*!********************************************************************************************************************************!*\
  !*** ./vendor/spryker-eco/payone/src/SprykerEco/Yves/Payone/Theme/default/components/molecules/payone-klarna/payone-klarna.ts ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PayoneKlarna)
/* harmony export */ });
/* harmony import */ var ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ShopUi/models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");
/* tslint:disable: max-file-line-count */


var TOKEN_CONTAINER_ID = 'paymentForm_payoneKlarna_payMethodToken';
var IS_VALID_PARAM = 'is_valid';
var GET_TOKEN_URL = '/payone/get-token';
var CONTAINER_ID = '#klarna_container';
class PayoneKlarna extends ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this.scriptLoader = void 0;
    this.selectField = void 0;
    this.availablePayment = void 0;
    this.availablePaymentArray = [];
    this.currentPaymentMethodCategory = void 0;
    this.currentPaymentCompanyToken = void 0;
    this.allKlarnaPayMethods = void 0;
    this.addressData = {
      'given_name': this.givenName,
      'family_name': this.familyName,
      'email': this.email,
      'street_address': this.streetAddress,
      'postal_code': this.postalCode,
      'city': this.city,
      'country': this.country,
      'phone': this.phone
    };
  }
  readyCallback() {}
  init() {
    this.scriptLoader = this.getElementsByClassName(this.jsName + "__script-loader")[0];
    this.selectField = this.getElementsByClassName(this.jsName + "__select-field")[0];
    this.allKlarnaPayMethods = JSON.parse(this.klarnaPayMethods());
    this.mapEvents();
  }
  mapEvents() {
    this.mapScriptLoadEvent();
    this.mapSelectChangeEvent();
  }
  mapScriptLoadEvent() {
    this.scriptLoader.addEventListener('scriptload', () => this.getAvailablePaymentMethods());
  }
  mapSelectChangeEvent() {
    this.selectField.addEventListener('change', () => this.selectPaymentMethod());
  }
  getAvailablePaymentMethods() {
    Array.from(this.selectField.options).forEach(option => {
      if (!option.value) {
        return;
      }
      var formData = new FormData();
      formData.append('pay_method', option.value);
      fetch(GET_TOKEN_URL, {
        method: 'POST',
        body: formData
      }).then(response => response.json()).then(parsedResponse => {
        if (!parsedResponse[IS_VALID_PARAM]) {
          return;
        }
        this.availablePayment = {
          'pay_method': option.value,
          'client_token': parsedResponse.client_token
        };
        this.availablePaymentArray.push(this.availablePayment);
        option.removeAttribute('disabled');
      }).catch(error => {
        console.error(error.message);
      });
    });
  }
  selectPaymentMethod() {
    var paymentMethod = this.availablePaymentArray.find(payment => payment.pay_method === this.selectField.value);
    this.loadKlarna(paymentMethod);
  }
  loadKlarna(paymentData) {
    this.toggleSelectFieldDisable(true);
    Klarna.Payments.init({
      client_token: paymentData.client_token
    });
    Klarna.Payments.load({
      container: CONTAINER_ID,
      payment_method_category: this.allKlarnaPayMethods[paymentData.pay_method]
    }, response => {
      this.toggleSelectFieldDisable(false);
      Klarna.Payments.authorize({
        payment_method_category: this.allKlarnaPayMethods[paymentData.pay_method]
      }, {
        billing_address: this.addressData,
        customer: {
          date_of_birth: this.dateOfBirth
        }
      }, response => {
        var tokenContainer = document.getElementById(TOKEN_CONTAINER_ID);
        tokenContainer.value = response.authorization_token;
      });
    });
  }
  toggleSelectFieldDisable(isSelectDisabled) {
    this.selectField.disabled = isSelectDisabled;
  }
  get givenName() {
    return this.getAttribute('given-name');
  }
  get familyName() {
    return this.getAttribute('family-name');
  }
  get email() {
    return this.getAttribute('email');
  }
  get streetAddress() {
    return this.getAttribute('street-address');
  }
  get postalCode() {
    return this.getAttribute('postal-code');
  }
  get city() {
    return this.getAttribute('city');
  }
  get country() {
    return this.getAttribute('country');
  }
  get phone() {
    return this.getAttribute('phone');
  }
  get dateOfBirth() {
    return this.getAttribute('date-of-birth');
  }
  klarnaPayMethods() {
    return this.getAttribute('klarna-pay-methods');
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,