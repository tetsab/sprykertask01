"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["endless-scroll"],{

/***/ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/components/molecules/endless-scroll/endless-scroll.ts":
/*!*************************************************************************************************************************************!*\
  !*** ./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/components/molecules/endless-scroll/endless-scroll.ts ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EVENT_CONTENT_UPDATED: () => (/* binding */ EVENT_CONTENT_UPDATED),
/* harmony export */   "default": () => (/* binding */ EndlessScroll)
/* harmony export */ });
/* harmony import */ var _models_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");
/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../app */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/app/index.ts");
/* harmony import */ var _ajax_provider_ajax_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ajax-provider/ajax-provider */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/components/molecules/ajax-provider/ajax-provider.ts");



var EVENT_CONTENT_UPDATED = 'scrollContentUpdated';
class EndlessScroll extends _models_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this.ajaxProvider = void 0;
    this.scrollContainer = void 0;
    this.contentContainer = void 0;
    this.currentOffset = this.resultOffset;
    this.isFetching = false;
    this.containerScrollHandler = void 0;
  }
  readyCallback() {}
  init() {
    this.ajaxProvider = this.getElementsByClassName(this.jsName + "__ajax-provider")[0];
    this.scrollContainer = this.getElementsByClassName(this.jsName + "__scroll-container")[0];
    this.contentContainer = this.getElementsByClassName(this.jsName + "__container")[0];
    if (this.targetClassName) {
      this.scrollContainer = this.getElementsByClassName(this.targetClassName)[0];
      this.contentContainer = this.getElementsByClassName(this.targetClassName)[0];
    }
    if (this.isAllContentLoaded) {
      return;
    }
    this.mapEvents();
  }
  mapEvents() {
    this.mapContainerScrollEvent();
    this.mapFetchingContentEvent();
    this.mapFetchedContentEvent();
  }
  mapContainerScrollEvent() {
    this.containerScrollHandler = () => this.onContainerScroll();
    this.scrollContainer.addEventListener('scroll', this.containerScrollHandler);
  }
  mapFetchingContentEvent() {
    this.ajaxProvider.addEventListener(_ajax_provider_ajax_provider__WEBPACK_IMPORTED_MODULE_2__.EVENT_FETCHING, () => this.onFetching());
  }
  mapFetchedContentEvent() {
    this.ajaxProvider.addEventListener(_ajax_provider_ajax_provider__WEBPACK_IMPORTED_MODULE_2__.EVENT_FETCHED, () => this.onFetched());
  }
  onContainerScroll() {
    var scrollTopTriggerPosition = this.scrollContainer.scrollHeight - this.scrollContainer.clientHeight - this.scrollBottomTriggerPosition;
    if (scrollTopTriggerPosition <= this.scrollContainer.scrollTop) {
      this.fetchContent();
    }
  }
  onFetching() {
    this.isFetching = true;
  }
  onFetched() {
    this.isFetching = false;
    this.currentOffset += this.resultLimit;
    if (this.isAllContentLoaded) {
      this.removeScrollListener();
    }
    this.render();
  }
  fetchContent() {
    if (this.isFetching) {
      return;
    }
    this.ajaxProvider.queryParams.set(this.queryRange, String(this.currentOffset));
    this.ajaxProvider.fetch();
  }
  render() {
    var response = this.ajaxProvider.xhr.response;
    if (!response) {
      this.removeScrollListener();
      return;
    }
    this.contentContainer.innerHTML += response;
    if (this.hasContentMount) {
      (0,_app__WEBPACK_IMPORTED_MODULE_1__.mount)();
    }
    this.dispatchCustomEvent(EVENT_CONTENT_UPDATED);
  }
  removeScrollListener() {
    this.scrollContainer.removeEventListener('scroll', this.containerScrollHandler);
  }
  get isAllContentLoaded() {
    if (!this.resultTotal) {
      return false;
    }
    return this.resultTotal <= this.currentOffset;
  }
  get scrollBottomTriggerPosition() {
    var percentageContainerHeight = 100;
    return this.scrollContainer.scrollHeight / percentageContainerHeight * (percentageContainerHeight - this.percentageRequestTrigger);
  }
  get queryRange() {
    return this.getAttribute('query-range');
  }
  get resultOffset() {
    return Number(this.getAttribute('result-offset'));
  }
  get resultLimit() {
    return Number(this.getAttribute('result-limit'));
  }
  get resultTotal() {
    return Number(this.getAttribute('result-total'));
  }
  get percentageRequestTrigger() {
    return Number(this.getAttribute('percentage-request-trigger'));
  }
  get targetClassName() {
    return this.getAttribute('target-class-name');
  }
  get hasContentMount() {
    return this.hasAttribute('has-content-mount');
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,